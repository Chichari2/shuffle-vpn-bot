import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from dotenv import load_dotenv
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp –∫–Ω–æ–ø–∫–æ–π
webapp_url = "https://chichari2.github.io/shuffle-vpn-bot/"
webapp_keyboard = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å VPN-–ø–∞–Ω–µ–ª—å",
            web_app=WebAppInfo(url=webapp_url)
        )
    ]],
    resize_keyboard=True
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
sent_welcome_users = set()
user_locks = {}

# –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞—ë–º lock –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    if user_id not in user_locks:
        user_locks[user_id] = asyncio.Lock()

    async with user_locks[user_id]:
        if user_id not in sent_welcome_users:
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            await message.answer(
                "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ShuffleVPN!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏:",
                reply_markup=webapp_keyboard
            )
            sent_welcome_users.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö

@dp.message(Command("start"))
async def start(message: types.Message):
    await send_welcome(message)

if __name__ == "__main__":
    logger.info("üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        dp.run_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞: {e}")

